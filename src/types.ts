export interface SessionData {
  id?: string;
  timestamp: string;
  prompts: Prompt[];
  changes: FileChange[];
  thoughts?: ThoughtBlock[];
  message?: string;
  metadata?: {
    claudeVersion?: string;
    platform?: string;
    workingDirectory?: string;
    claudeProjectPath?: string;
    models?: string[];  // List of models used
    mcpServers?: MCPServer[];  // MCP servers if any
    nodeVersion?: string;  // Node.js version
    claudeSettings?: {  // Claude Code settings
      permissions?: string[];
      model?: string;
    };
    sessionStats?: {  // Session statistics
      totalTokensUsed?: number;
      averageResponseTime?: number;
      totalToolCalls?: number;
      errorCount?: number;
    };
  };
  toolCalls?: ToolCall[];  // All tool calls made
  assistantActions?: AssistantAction[];  // Track what assistant did
  toolExecutions?: ToolExecution[];  // Tool execution details
}

export interface Prompt {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
  associatedFiles?: string[];
  usage?: TokenUsage;
  responseTimeMs?: number;
  isAutoGenerated?: boolean;
  model?: string;  // Model used for this response
  toolCalls?: string[];  // Tool names called in this prompt
}

export interface TokenUsage {
  input_tokens?: number;
  output_tokens?: number;
  cache_creation_input_tokens?: number;
  cache_read_input_tokens?: number;
  total_tokens?: number;
}

export interface FileChange {
  type: 'create' | 'edit' | 'delete';
  path: string;
  content?: string;
  oldContent?: string;
  timestamp: string;
  diff?: string;
  structuredPatch?: any;
}

export interface ToolUseResult {
  filePath?: string;
  // Old format fields
  oldString?: string;
  newString?: string;
  originalFile?: string;
  structuredPatch?: any[];
  userModified?: boolean;
  replaceAll?: boolean;
  // New format fields (for MultiEdit/Edit)
  edits?: Array<{
    old_string: string;
    new_string: string;
    replace_all?: boolean;
  }>;
  originalFileContents?: string;
}

export interface ThoughtBlock {
  content: string;
  timestamp: string;
}

export interface ShareResponse {
  url: string;
  shareId: string;
  expiresAt?: string;
}

export interface ToolCall {
  name: string;
  timestamp: string;
  parameters?: any;
  isMCP?: boolean;  // true if tool name starts with mcp__
}

export interface MCPServer {
  name: string;
  tools: string[];
}

export interface AssistantAction {
  type: 'explanation' | 'code_change' | 'file_read' | 'command_execution' | 'analysis';
  description: string;
  timestamp: string;
  promptId?: string;  // Link to the user prompt that triggered this
  details?: any;  // Additional details specific to the action type
}

export interface ToolExecution {
  tool: string;  // Tool name (Read, Update, Bash, etc.)
  timestamp: string;
  parameters?: any;  // Tool parameters
  result?: string;  // Execution result
  status?: 'success' | 'error';  // Execution status
  promptId?: string;  // Link to the prompt
  fileChange?: {  // File change details for Edit/MultiEdit tools
    filePath: string;
    changeType: 'edit' | 'create' | 'delete';
    diff?: string;
    oldContent?: string;
    newContent?: string;
  };
}

export interface RawSessionEntry {
  parentUuid: string;
  uuid: string;
  type: string;
  timestamp: string;
  message?: any;
  toolUseResult?: any;
  [key: string]: any;  // Allow any other fields
}

export interface RawSessionData {
  prompts: Array<{
    userPrompt: RawSessionEntry;
    sessionEntries: RawSessionEntry[];  // All entries until next user prompt
  }>;
  metadata?: any;
}

export interface WorkflowItem {
  type: 'tool_execution' | 'tool_result' | 'assistant_action';
  timestamp: string;
  tool?: string;  // For tool_execution and tool_result
  parameters?: any;  // For tool_execution
  result?: string;  // For tool_result
  status?: 'success' | 'error';  // For tool_result
  description?: string;  // For assistant_action
  actionType?: 'explanation' | 'code_change' | 'file_read' | 'command_execution' | 'analysis';  // For assistant_action
  promptId?: string;
  // File change details (for Edit/MultiEdit tool results)
  fileChange?: {
    filePath: string;
    changeType: 'edit' | 'create' | 'delete';
    diff?: string;
    oldContent?: string;
    newContent?: string;
  };
}